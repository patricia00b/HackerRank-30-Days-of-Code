if s==s[::-1]:
    print('The word',s,'is a palindrome.')
else:
    print ('The word',s,'is not a palindrome.')
    
    
    #OR
    
    class Solution:

    def __init__(self): 
        #Two instance variables: one for stack , and one for queue .
        self.stack = []
        self.queue = []
        
    def pushCharacter(self,ch):
        #method that pushes a character onto a stack.
        self.stack.append(ch)
        
    def enqueueCharacter(self,ch):
        #method that enqueues a character in the queue instance variable.
        self.queue.append(ch)
        
    def popCharacter(self):
        #method that pops and returns the character at the top of the instance variable.
        return self.stack.pop()  #Last-In-First-Out (LIFO)
        
    def dequeueCharacter(self):
        #method that dequeues and returns the first character in the  instance variable.
        return self.queue.pop(0)  #First-In-First-Out (FIFO)
        
        # read the string s
s=input()
#Create the Solution class object
obj=Solution()   

l=len(s)
# push/enqueue all the characters of string s to stack
for i in range(l):
    obj.pushCharacter(s[i])
    obj.enqueueCharacter(s[i])
    
isPalindrome=True
'''
pop the top character from stack
dequeue the first character from queue
compare both the characters
''' 
for i in range(l // 2):
    if obj.popCharacter()!=obj.dequeueCharacter():
        isPalindrome=False
        break
#finally print whether string s is palindrome or not.
if isPalindrome:
    print("The word, "+s+", is a palindrome.")
else:
    print("The word, "+s+", is not a palindrome.") 
    
    
